buildscript {
	ext {
		springBootVersion = '3.0.1'
	}
	repositories {
                mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:_")
	}
}

plugins {
	id 'java'

}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group 'tron.oracle'
version 'v1.0'

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://repo1.maven.org/maven2" }
	maven {
		url "https://plugins.gradle.org/m2/"
	}
	maven {
		url "https://oss.sonatype.org/content/repositories/releases/"
	}
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots/"
	}
	maven { url 'https://jitpack.io' }
}

dependencies {
        
	implementation project(':node:webapp')
        
	implementation 'org.springframework.boot:spring-boot-starter-web:_'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:_'
	runtimeOnly 'mysql:mysql-connector-java:_'
	testImplementation(Spring.boot.test) {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
                
	annotationProcessor 'org.projectlombok:lombok:_'
	compileOnly 'org.projectlombok:lombok:_'
	testAnnotationProcessor 'org.projectlombok:lombok:_'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:_'
	testCompileOnly 'org.projectlombok:lombok:_'
	implementation 'javax.validation:validation-api:_'
	implementation 'org.apache.httpcomponents:httpcore:_'
	implementation 'ch.qos.logback:logback-classic:_'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:_'
	implementation ('org.flywaydb:flyway-core:_') {
		exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-toml'
       }
	implementation 'org.yaml:snakeyaml:_'
	implementation 'com.google.guava:guava:_'
	implementation 'org.apache.httpcomponents:httpclient:_'
	implementation 'org.apache.commons:commons-lang3:_'
	implementation 'com.madgag.spongycastle:core:_'
	implementation 'com.madgag.spongycastle:prov:_'
        
	implementation('com.github.tronprotocol:java-tron:_') {
		exclude group: 'com.alibaba', module: 'fastjson'
                exclude group: 'com.github.tronprotocol', module: 'zksnark-java-sdk'
	}
	implementation 'com.alibaba:fastjson:_'
	testImplementation Testing.junit4
	implementation 'com.google.code.gson:gson:_'
	implementation 'org.slf4j:slf4j-api:_'

	implementation 'com.google.protobuf:protobuf-java:_'
	implementation 'io.grpc:grpc-netty-shaded:_'

	implementation 'io.grpc:grpc-netty:_'
	implementation 'io.grpc:grpc-protobuf:_'
	implementation 'io.grpc:grpc-stub:_'
	implementation "org.bouncycastle:bcprov-jdk15on:_"
	implementation 'com.google.guava:guava:_'
	implementation fileTree(dir:'src/libs', include: '*.jar')
}

def binaryRelease(taskName, jarName, mainClass) {
	return tasks.create("${taskName}", Jar) {
		archiveBaseName = jarName
		archiveVersion = null
		from(sourceSets.main.output) {
			include "/**"
		}

		from {
			configurations.runtimeClasspath.collect {
				it.isDirectory() ? it : zipTree(it)
			}
		}

		manifest {
			attributes "Main-Class": "${mainClass}"
			attributes "Spring-Boot-Classpath-Index": "BOOT-INF/classpath.idx"
			attributes "Start-Class": "com.tron.OracleApplication"
			attributes "Spring-Boot-Classes": "BOOT-INF/classes/"
			attributes "Spring-Boot-Lib": "BOOT-INF/lib/"
		}
                
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	}
}

artifacts {
	archives(binaryRelease('buildUserNodeJar', 'UserNode', 'com.tron.user.SendRequest'),
			binaryRelease('buildCheckDeviationJar', 'CheckDeviation', 'com.tron.user.CheckDeviation'),
			binaryRelease('buildOracleJar', 'OracleNode', 'com.tron.OracleApplication'))
}
